import 'dotenv/config';
import express from 'express';
import path from 'path';
import fs from 'fs';
import AvitoXmlGenerator from './src/hendler/avitoExports.js';
import Bitrix24Client from './src/config/bitrix.js';
import PriceReductionManager from './src/hendler/priceApp.js';
import cron from 'node-cron';
import TelegramNotifier from './src/config/telegram.js';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const PORT = process.env.PORT || 3000;

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  bitrix24: {
    domain: process.env.BITRIX_API_URL,
    userId: process.env.BITRIX_USER_ID,
    webhookCode: process.env.BITRIX_WEBHOOK_TOKEN
  },
  telegram: {
    token: process.env.TELEGRAM_BOT_TOKEN,
    chatId: process.env.TELEGRAM_CHAT_ID
  },
  limits: {
    batchSize: 50,
    delayBetweenRequests: 1000
  },
  reduction: {
    initialPercent: 3,
    finalPercent: 2,
    maxReductions: 7,
    daysBetweenReductions: 10
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const bitrixClient = new Bitrix24Client(
  config.bitrix24.domain,
  config.bitrix24.userId,
  config.bitrix24.webhookCode
);
const avitoGenerator = new AvitoXmlGenerator(bitrixClient);
const priceManager = new PriceReductionManager(config);
const telegramNotifier = new TelegramNotifier(
  config.telegram.token,
  config.telegram.chatId
);

// –ü—É—Ç—å –∫ XML —Ñ–∞–π–ª—É
const XML_FILE_PATH = path.join(process.cwd(), 'avito_export.xml');

// Middleware –¥–ª—è –ª–æ–≥–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);
  next();
});

// –†–æ—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è XML
app.get('/avito.xml', (req, res) => {
  try {
    if (fs.existsSync(XML_FILE_PATH)) {
      res.set('Content-Type', 'application/xml');
      res.sendFile(XML_FILE_PATH);
    } else {
      res.status(404).send('XML file not found');
    }
  } catch (error) {
    console.error('Error serving XML file:', error);
    res.status(500).send('Internal Server Error');
  }
});

// –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Avito
async function runAvitoExport() {
  try {
    console.log('–ó–∞–ø—É—Å–∫ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Avito...');
    const xml = await avitoGenerator.generateAvitoXml();
    await avitoGenerator.saveXml(xml, XML_FILE_PATH);
    console.log('–í—ã–≥—Ä—É–∑–∫–∞ –≤ Avito –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    return { success: true };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Avito:', error);
    await telegramNotifier.sendNotification(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏ –≤ Avito: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω (–≤–∞—à–∞ –≤–µ—Ä—Å–∏—è —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏)
async function runPriceReduction() {
  try {
    console.log('–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω...');
    const startTime = new Date();
    
    const result = await priceManager.processAllProducts();
    
    const endTime = new Date();
    const duration = (endTime - startTime) / 1000;
    
    // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = {
      startTime: startTime.toISOString(),
      endTime: endTime.toISOString(),
      duration: `${duration} —Å–µ–∫`,
      totalProducts: result.total || 0,
      processedProducts: result.processed || 0,
      priceReductionsApplied: 0,
      lastReductions: 0,
      skippedDueToPrice: 0,
      skippedDueToLimit: 0,
      errors: 0
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if (result.results && Array.isArray(result.results)) {
      result.results.forEach(item => {
        if (item.processed) {
          stats.priceReductionsApplied++;
          if (item.totalReductions + 1 >= config.reduction.maxReductions) {
            stats.lastReductions++;
          }
        } else if (item.reason?.includes('–¶–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–∂–µ–Ω–∏—è')) {
          stats.skippedDueToPrice++;
        } else if (item.reason?.includes('–î–æ—Å—Ç–∏–≥–Ω—É—Ç/–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç')) {
          stats.skippedDueToLimit++;
        } else if (item.error) {
          stats.errors++;
        }
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = `
üìä –û—Ç—á–µ—Ç –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω
‚è± –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${stats.startTime}
‚è± –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${stats.endTime}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${stats.duration}

üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: ${stats.totalProducts}
‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${stats.processedProducts}
üîΩ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω–∏–π: ${stats.priceReductionsApplied}
‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–Ω–∏–∂–µ–Ω–∏—è: ${stats.lastReductions}

‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Ü–µ–Ω–∞ —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω–∞): ${stats.skippedDueToPrice}
üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç): ${stats.skippedDueToLimit}
‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${stats.errors}
    `;

    console.log(result);
    await telegramNotifier.sendNotification(report);
    
    return {
      success: true,
      stats: stats,
      details: result
    };
  } catch (error) {
    const errorMessage = `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ü–µ–Ω: ${error.message}`;
    console.error(errorMessage);
    await telegramNotifier.sendNotification(errorMessage);
    return { 
      success: false, 
      error: error.message 
    };
  }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron-–∑–∞–¥–∞—á
function setupCronJobs() {
  // –í—ã–≥—Ä—É–∑–∫–∞ –≤ Avito –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
  cron.schedule('*/30 * * * *', async () => {
    await runAvitoExport();
  });

  // –ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:10
  cron.schedule('10 0 * * *', async () => {
    await runPriceReduction();
  });

  console.log('Cron jobs –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
(async () => {
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ cron
    setupCronJobs();

    await runPriceReduction();
    await runAvitoExport();

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(PORT, () => {
      console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`XML —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://–≤–∞—à-–¥–æ–º–µ–Ω:${PORT}/avito.xml`);
    });

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    process.exit(1);
  }
})();