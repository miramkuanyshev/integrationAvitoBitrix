import Bitrix24Client from '../config/bitrix.js';
import PriceReductionCalculator from './priceHendler.js';
import TelegramNotifier from '../config/telegram.js';
import { setTimeout } from 'timers/promises';
import 'dotenv/config';

const config = {
  bitrix24: {
    domain: process.env.BITRIX_API_URL,
    userId: process.env.BITRIX_USER_ID,
    webhookCode: process.env.BITRIX_WEBHOOK_TOKEN
  },
  telegram: {
    token: process.env.TELEGRAM_BOT_TOKEN,
    chatId: process.env.TELEGRAM_CHAT_ID
  },
  limits: {
    batchSize: 50,
    delayBetweenRequests: 1000
  },
  reduction: {
    initialPercent: 3,
    finalPercent: 2,
    maxReductions: 7,
    daysBetweenReductions: 10
  }
};

export default class PriceReductionManager {
  constructor(config) {
    this.config = config;
    this.bitrixClient = new Bitrix24Client(
      config.bitrix24.domain,
      config.bitrix24.userId,
      config.bitrix24.webhookCode
    );
    this.telegramNotifier = new TelegramNotifier(
      config.telegram.token,
      config.telegram.chatId
    );
    this.priceCalculator = new PriceReductionCalculator(config);
  }

  async getAllProducts() {
    let allProducts = [];
    let start = 0;
    let hasMore = true;

    const selectFields = [
      'ID',
      'NAME',
      'PRICE',
      'PROPERTY_159',
      'PROPERTY_161',
      'PROPERTY_165',
      'PROPERTY_379',
      'PROPERTY_381'
    ];

    while (hasMore) {
      const products = await this.bitrixClient.getProductsBatch(
        selectFields,
        start,
        this.config.limits.batchSize
      );

      allProducts = [...allProducts, ...products];
      hasMore = products.length === this.config.limits.batchSize;
      start += this.config.limits.batchSize;

      if (hasMore) {
        await setTimeout(this.config.limits.delayBetweenRequests);
      }
    }

    return allProducts;
  }

 async processProductPriceReduction(product) {
  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${product.NAME} (ID: ${product.ID})`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ
  if (!product.PROPERTY_165 || product.PROPERTY_165 === 'false') {
    return { processed: false, reason: '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ (PROPERTY_165)' };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
  if (!product.PROPERTY_159 || product.PROPERTY_159 === 'false') {
    return { processed: false, reason: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (PROPERTY_159)' };
  }

  const currentPrice = parseFloat(product.PRICE);
  const actualEstimate = parseFloat(product.PROPERTY_159.value);
  const estimateDate = product.PROPERTY_161.value;
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–Ω–∏–∂–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏
  const requiredReductions = this.priceCalculator.calculateReductionsCount(estimateDate);
  const currentReductions = this.processProductPriceReduction(product)

  // –ï—Å–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
  if (requiredReductions <= currentReductions) {
    return { 
      processed: false, 
      reason: `–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–Ω–∏–∂–µ–Ω–∏–π (—Ç–µ–∫—É—â–∏—Ö: ${currentReductions}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${requiredReductions})`
    };
  }

  // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º—É–º –ø–æ–Ω–∏–∂–µ–Ω–∏–π
  if (requiredReductions >= this.config.reduction.maxReductions) {
    const message = `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞! –¢–æ–≤–∞—Ä ${product.NAME} (ID: ${product.ID}) ` +
                   `–ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –ø–æ–Ω–∏–∂–µ–Ω–∏–π (${requiredReductions} –∏–∑ ${this.config.reduction.maxReductions}). ` +
                   `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}, –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${actualEstimate}`;
    
    await this.telegramNotifier.sendNotification(message);
    return { 
      processed: false, 
      reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç/–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–Ω–∏–∂–µ–Ω–∏–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞',
      requiresRevaluation: true
    };
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–Ω–∏–∂–µ–Ω–∏–π
  const newPrice = Math.ceil(this.priceCalculator.calculateNewPrice(actualEstimate, requiredReductions));
  const nextDate = this.priceCalculator.getNextReductionDate(estimateDate, requiredReductions);

  console.log(`–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}, –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice.toFixed(2)}`);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const updateFields = {
    'PRICE': newPrice.toFixed(2),
    'PROPERTY_379': nextDate.toISOString(),
    'PROPERTY_381': requiredReductions.toString()
  };

  try {
    await this.bitrixClient.updateProduct(product.ID, updateFields);
    console.log(`–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω. –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω–∏–π: ${requiredReductions - currentReductions}`);

    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º - —É–≤–µ–¥–æ–º–ª—è–µ–º
    if (requiredReductions + 1 >= this.config.reduction.maxReductions) {
      await this.sendUpcomingLimitNotification(product, requiredReductions + 1);
    }
    
    return { 
      processed: true,
      priceChanged: (newPrice !== currentPrice),
      oldPrice: currentPrice,
      newPrice: newPrice.toFixed(2),
      reductionsApplied: (requiredReductions - currentReductions),
      totalReductions: requiredReductions,
      nextReductionDate: nextDate
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.ID}:`, error);
    return { processed: false, error: error.message };
  }
}

async sendUpcomingLimitNotification(product, nextReductionNumber) {
  const message = `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –¢–æ–≤–∞—Ä ${product.NAME} (ID: ${product.ID}) ` +
                 `–ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–Ω–∏–∂–µ–Ω–∏–∏ (${nextReductionNumber}/${this.config.reduction.maxReductions}) ` +
                 `–¥–æ—Å—Ç–∏–≥–Ω–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–π.`;
  
  await this.telegramNotifier.sendNotification(message);
}

  async sendMaxReductionNotification(product) {
    const message = `üö® –¢–æ–≤–∞—Ä ${product.NAME} (ID: ${product.ID}) –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã. ` +
                   `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${product.PRICE}. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ: ${new Date().toLocaleDateString()}`;
    
    try {
      await this.telegramNotifier.sendNotification(message);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
  }

  async processAllProducts() {
    try {
      const products = await this.getAllProducts();
      console.log(`–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${products.length}`);

      let processedCount = 0;
      const results = [];

      for (const product of products) {
        const result = await this.processProductPriceReduction(product);
        results.push({ id: product.ID, ...result });
        
        if (result.processed) {
          processedCount++;
        }

        await setTimeout(this.config.limits.delayBetweenRequests);
      }

      console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${processedCount} –∏–∑ ${products.length}`);
      return { success: true, processed: processedCount, total: products.length, results };
    } catch (error) {
      console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
      return { success: false, error: error.message };
    }
  }

 async processProductPriceReduction(product) {
  console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–∞ ${product.NAME} (ID: ${product.ID})`);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ
  if (product.PROPERTY_541 && product.PROPERTY_541.value === 173) {
    return { processed: false, reason: '–ü–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ (PROPERTY_541)' };
}

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
  if (!product.PROPERTY_159 || product.PROPERTY_159 === 'false') {
    return { processed: false, reason: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (PROPERTY_159)' };
  }

  const currentPrice = parseFloat(product.PRICE);
  const actualEstimate = parseFloat(product.PROPERTY_159.value);
  const estimateDate = new Date(product.PROPERTY_161.value);
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ü–µ–Ω–∫–∏
  const daysSinceEstimate = Math.floor((new Date() - estimateDate) / (1000 * 60 * 60 * 24));
  
  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–Ω–∏–∂–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 10 –¥–Ω–µ–π)
  const calculatedReductions = Math.floor(daysSinceEstimate / this.config.reduction.daysBetweenReductions);
  
  // –ï—Å–ª–∏ –ø–æ–Ω–∏–∂–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
  if (calculatedReductions <= 0) {
    return { 
      processed: true, 
      reason: `–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–Ω–∏–∂–µ–Ω–∏–π (–ø—Ä–æ—à–ª–æ ${daysSinceEstimate} –¥–Ω–µ–π, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º ${this.config.reduction.daysBetweenReductions} –¥–Ω–µ–π)`
    };
  }

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–Ω–∏–∂–µ–Ω–∏–π
  const newPrice = Math.ceil(this.priceCalculator.calculateNewPrice(actualEstimate, calculatedReductions));

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã
  if (currentPrice <= newPrice) {
    return {
      processed: true,
      reason: `–¶–µ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–Ω–∏–∂–µ–Ω–∏—è (—Ç–µ–∫—É—â–∞—è: ${currentPrice}, —Ä–∞—Å—á–µ—Ç–Ω–∞—è: ${newPrice})`,
      currentPrice,
      newPrice,
      daysSinceEstimate,
      calculatedReductions
    };
  }

  // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –º–∞–∫—Å–∏–º—É–º –ø–æ–Ω–∏–∂–µ–Ω–∏–π
  if (calculatedReductions >= this.config.reduction.maxReductions) {
    const message = `–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞! –¢–æ–≤–∞—Ä ${product.NAME} (ID: ${product.ID}) ` +
                   `–ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –ø–æ–Ω–∏–∂–µ–Ω–∏–π (${calculatedReductions} –∏–∑ ${this.config.reduction.maxReductions}). ` +
                   `–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}, –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${actualEstimate}`;
    
    await this.telegramNotifier.sendNotification(message);
    return { 
      processed: true, 
      reason: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç/–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–Ω–∏–∂–µ–Ω–∏–π - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞',
      requiresRevaluation: true
    };
  }

  const nextDate = this.priceCalculator.getNextReductionDate(estimateDate, calculatedReductions);

  console.log(`–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}, –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ${newPrice.toFixed(2)}`);
  console.log(`–ü—Ä–æ—à–ª–æ –¥–Ω–µ–π: ${daysSinceEstimate}, –ü–æ–Ω–∏–∂–µ–Ω–∏–π: ${calculatedReductions}`);

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  const updateFields = {
    'PRICE': newPrice.toFixed(2),
  };

  try {
    await this.bitrixClient.updateProduct(product.ID, updateFields);
    console.log(`–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω. –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–æ–Ω–∏–∂–µ–Ω–∏–π: ${calculatedReductions}`);

    // –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–º - —É–≤–µ–¥–æ–º–ª—è–µ–º
    if (calculatedReductions + 1 >= this.config.reduction.maxReductions) {
      await this.sendUpcomingLimitNotification(product, calculatedReductions + 1);
    }
    return { 
      processed: true,
      priceChanged: true,
      oldPrice: currentPrice,
      newPrice: newPrice.toFixed(2),
      reductionsApplied: calculatedReductions,
      totalReductions: calculatedReductions,
      nextReductionDate: nextDate,
      daysSinceEstimate: daysSinceEstimate
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.ID}:`, error);
    return { processed: false, error: error.message };
  }
}
}