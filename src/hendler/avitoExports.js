import { Builder } from 'xml2js';
import { setTimeout } from 'timers/promises';
import { promises as fs } from 'fs';
import CarDataProcessor from '../../autocomplete/bitrixFieldsComplite.js';
import SECTION_MAPPING from '../mapping/avitoMapping.js';

export default class AvitoXmlGenerator {
  constructor(bitrixClient) {
    this.bitrixClient = bitrixClient;
    this.builder = new Builder({
      xmldec: { version: '1.0', encoding: 'UTF-8' },
      renderOpts: { pretty: true, indent: '  ', newline: '\n' },
      cdata: true
    });
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã–≥—Ä—É–∑–∫–∏
   */
  async generateAvitoXml() {
    try {
      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24...');
      const products = await this.getAllProducts();
      console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);
      console.log(`–û–±–Ω–æ–≤–ª—è—é —Å—Ç—Ä–æ–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ê–≤–∏—Ç–æ`);
      const avitoAds = await this.convertProductsToAvito(products);
      console.log(`‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${avitoAds.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ê–≤–∏—Ç–æ`);

      const xml = this.buildXml(avitoAds);
      return xml;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
   */
  async getAllProducts() {
    const selectFields = this.getRequiredFields();
    let allProducts = [];
    let start = 0;
    const limit = 50;

    do {
      const products = await this.bitrixClient.getProductsBatch(selectFields, start, limit);
      allProducts = [...allProducts, ...products];
      start += limit;

      if (products.length === limit) {
        await setTimeout(1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      }
    } while (allProducts.length % limit === 0 && allProducts.length > 0);

    return allProducts;
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏
   */
  getRequiredFields() {
    const baseFields = ['ID', 'NAME', 'PRICE', 'SECTION_ID', 'DESCRIPTION', 'PROPERTY_%', 'PROPERTY_415', 'PROPERTY_385', 'PROPERTY_117', 'PROPERTY_425'];
    const specificFields = [];

    for (const section of Object.values(SECTION_MAPPING)) {
      for (const bitrixField of Object.keys(section.fields)) {
        if (!specificFields.includes(bitrixField)) {
          specificFields.push(bitrixField);
        }
      }
    }

    return [...baseFields, ...specificFields];
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã Bitrix24 –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏—è Avito
   */
  async convertProductsToAvito(products) {
    const convertedProducts = [];

    for (const product of products) {
      try {
        const sectionId = product.SECTION_ID;
        const mapping = SECTION_MAPPING[sectionId];
        if (!mapping) {
          console.warn(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª ${sectionId} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.ID}`);
          continue;
        }

        const convertedProduct = await this.convertProduct(product, mapping);
        if (convertedProduct) {
          convertedProducts.push(convertedProduct);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.ID}:`, error);
      }
    }

    return convertedProducts;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç Avito
   */
  async convertProduct(product, mapping) {
    try {
      let images;
      if (product.PROPERTY_425.value) {
        images = await this.getImagesFromString(product.PROPERTY_425.value);
      } else {
        images = await this.getImages(product);
      }

      // –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
      const ad = {
        Id: product.PROPERTY_165?.value ?? product.ID,
        Title: product.NAME,
        Price: Math.ceil(parseFloat(product.PRICE)),
        Images: images,
        CurrencyPrice: Math.ceil(parseFloat(product.PRICE)),
        Description: product.DESCRIPTION,
        Address: product.PROPERTY_117?.value,
        ...mapping.defaults // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      };

      // –ú–∞–ø–ø–∏–Ω–≥ —Å–≤–æ–π—Å—Ç–≤
      for (const [bitrixField, avitoField] of Object.entries(mapping.fields)) {
        const value = product[bitrixField];
        if (!value) continue;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ–π
        if (Array.isArray(value)) {
          ad[avitoField] = value.map(item => item.value || item).filter(Boolean);
        } else if (typeof value === 'object' && value.value !== undefined) {
          ad[avitoField] = value.value;
        } else {
          ad[avitoField] = value;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      const missingFields = mapping.requiredFields.filter(field => !ad[field]);
      if (missingFields.length > 0) {
        console.warn(`‚ö†Ô∏è –¢–æ–≤–∞—Ä ${product.ID} –ø—Ä–æ–ø—É—â–µ–Ω ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`);
        return null;
      }

      return ad;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞ ${product.ID}:`, error);
      return null;
    }
  }

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
   */

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç CDN-—Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
   * @param {Object} product ‚Äî –æ–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏–∑ crm.product.get/list
   * @returns {Promise<{ Image: Array<{ $: { url: string }} > }>}
   */

  async getImages(product) {
    try {
      const files = await this.bitrixClient.getImgFile(product.ID);
      const cdnImages = files.productImages?.map(image => image.detailUrl) || [];

      if (cdnImages.length === 0) {
        console.warn(`‚ùå –£ —Ç–æ–≤–∞—Ä–∞ ${product.ID} –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        return { Image: [] };
      }

      return {
        Image: cdnImages.slice(0, 20).map(url => ({
          $: { url }
        }))
      };
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${product.ID}:`, error);
      return { Image: [] };
    }
  }

  async getImagesFromString(imagesString) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if (!imagesString || typeof imagesString !== 'string') {
            console.warn('‚ùå –ü–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏');
            return { Image: [] };
        }

        // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é `|` –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        const urls = imagesString
            .split('|')
            .map(url => url.trim())
            .filter(url => url !== ''); // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

        if (urls.length === 0) {
            console.warn('‚ùå –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö URL –≤ —Å—Ç—Ä–æ–∫–µ');
            return { Image: [] };
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º XML-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –æ–±—ä–µ–∫—Ç (–ø–µ—Ä–≤—ã–µ 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        return {
            Image: urls.slice(0, 20).map(url => ({
                $: { url }
            }))
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
        return { Image: [] };
    }
}

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π XML
   */
  buildXml(ads) {
    const xmlObject = {
      Ads: {
        $: {
          formatVersion: '3',
          target: 'Avito.ru'
        },
        Ad: ads
      }
    };

    return this.builder.buildObject(xmlObject);
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç XML –≤ —Ñ–∞–π–ª
   */
  async saveXml(xml, filename = 'avito_export.xml') {
    try {
      await fs.writeFile(filename, xml);
      console.log(`‚úÖ –§–∞–π–ª ${filename} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω`);
    } catch (e) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${e.message}`);
      throw e;
    }
  }
}